/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import java.util.*;

public class App {

  public static boolean checkString(String str1, String str2) {
    if (str1.length() == 0 || str2.length() == 0 || str1.length() == 0 && str2.length() == 0) {
      System.out.println("One Or Both Of Strings Is Empty");
    }
    String string1Low = str1.replaceAll("\\s", "").toLowerCase(Locale.ROOT);
    String string2Low = str2.replaceAll("\\s", "").toLowerCase(Locale.ROOT);
    String[] st1 = string1Low.split("");
    String[] st2 = string2Low.split("");
    HashMap<String, Integer> string1 = new HashMap<>();
    HashMap<String, Integer> string2 = new HashMap<>();
    for (int i = 0; i < st1.length; i++) {
      if (!string1.containsKey(st1[i])) {
        string1.put(st1[i], 1);
      } else {
        string1.put(st1[i], string1.get(st1[i]) + 1);
      }
    }
    for (int i = 0; i < st2.length; i++) {
      if (!string2.containsKey(st2[i])) {
        string2.put(st2[i], 1);
      } else {
        string2.put(st2[i], string2.get(st2[i]) + 1);
      }
    }
    if (string1.equals(string2)) {
      return true;
    }
    return false;
  }

  public static String findSpace(String url) {
    if (url.length() == 0)
      return "";
    StringBuilder str = new StringBuilder();
    for (int i = 0; i < url.length(); i++) {
      if (url.charAt(i) == ' ') {
        str.append("%20");
      } else {
        str.append(url.charAt(i));
      }
    }
    return str.toString();
  }

  public static String romanNumerals(int num) {
    if (num<=0 || num>5000)
      return "Invalid Number";
    int[] dec = { 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 };
    String[] rom = { "M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I" };
    StringBuilder ansVal = new StringBuilder();
    for (int i=0; i<dec.length; i++){
      while (num>=dec[i]){
        num -=dec[i];
        ansVal.append(rom[i]);
      }
    }
    return ansVal.toString();
  }

  public static void main(String[] args) {

    Graph<String, Integer> graph = new Graph<>();
    graph.addNode("Tareq");
    graph.addNode("osaid");
    graph.addNode("mohammed");
    graph.addNode("rahaf");
    graph.addNode("A");
    graph.addNode("B");
    graph.addNode("C");
    graph.addNode("V");
//      graph.addNode("doaa");
//      graph.addNode("doaa");
//      graph.addNode("T");
//      graph.addNode("A");
    graph.addEdge("Tareq", "osaid", 10);
    graph.addEdge("Tareq", "mohammed", 20);
    graph.addEdge("Tareq", "rahaf", 30);
    graph.addEdge("mohammed", "osaid", 25);
    graph.addEdge("mohammed", "rahaf", 45);
    graph.addEdge("osaid", "rahaf", 35);
    graph.addEdge("osaid", "A", 35);
    graph.addEdge("A", "V", 35);
    graph.addEdge("osaid", "B", 35);
    graph.addEdge("osaid", "C", 35);
//      graph.addEdge("T","A");
////      graph.addEdge("T","T");
//      graph.addEdge("Tareq","mohammed");
//      System.out.println(graph.getNeighbors("T"));
//      System.out.println(graph.getNodes());
//      System.out.println(graph.size());
//      System.out.println(graph.breadthFirst("T"));
//      System.out.println(graph.breadthFirst("Tareq"));
//      System.out.println(graph.breadthFirst("mohammed"));
//      System.out.println(graph.breadthFirst("rahaf"));
//    List<String> cities = new ArrayList<>();
//    cities.add("Tareq");
//    cities.add("mohammed");
//    cities.add("rahaf");
//    cities.add("osaid");
//    cities.add("Tareq");
//      System.out.println(Graph.businessTrip(graph,cities));
//      System.out.println("======================================================");
//      System.out.println(graph.depthFirst("osaid"));
//      System.out.println("======================================================");
    Map<GraphNode<String, Integer>, List<GraphNode<String, Integer>>> adj;
    adj = graph.getAdjList();

    Set<GraphNode<String, Integer>> graphKeys = adj.keySet();
//      System.out.println(graphKeys);
//      System.out.println(adj);

//    GraphNode<String, Integer> node1 = new GraphNode<>("osaid");
//    GraphNode<String, Integer> node2 = new GraphNode<>("mohammed");
//    System.out.println(graph.checkNeighbors(node1, node2, adj));
//      var adj = graph.getAdjList();

    System.out.println("======================================================");


    String s1 = "Swear often";
    String s2 = "Software";
    System.out.println(checkString(s1, s2));

    String url = "http://code.org/hour of code.html";
    System.out.println(url);
    System.out.println(findSpace(url));

    System.out.println(romanNumerals(4994));
  }


}
