/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashTable;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

  @Test
  void valueBeingInTheDataStructure (){
    HashTable<String,Integer> hashTable = new HashTable<>();
    hashTable.add("A",7);
    assertTrue(hashTable.contain("A"));
    assertEquals(7,hashTable.get("A"));
  }

  @Test
  void retrievingBasedOnAKeyReturnsTheValueStored(){
    HashTable<String,Integer> hashTable = new HashTable<>();
    hashTable.add("A",7);
    assertEquals(7,hashTable.get("A"));
  }

  @Test
  void  returnsNullForAKeyThatDoesNotExistInTheHashtable(){
    HashTable<String,Integer> hashTable = new HashTable<>();
    hashTable.add("A",7);
    assertNull(hashTable.get("B"));
  }


  @Test
  void successfullyHandleACollisionWithinTheHashtable(){
    HashTable<String,Integer> hashTable = new HashTable<>();
    hashTable.add("Teheran",46);
    hashTable.add("Siblings",47);
    HashNode<String,Integer> node ;
    node = hashTable.getBucketArray().get(hashTable.getBucketIndex("Teheran"));
    assertTrue(node.hashCode == node.getNext().hashCode);
  }


  @Test
  void retrieveAValueFromABucketWithinTheHashtableThatHasACollision(){
    HashTable<String,Integer> hashTable = new HashTable<>();
    hashTable.add("Teheran",46);
    hashTable.add("Siblings",47);
    assertEquals(47,hashTable.get("Siblings"));
  }

  @Test
  void indexInRang(){
    HashTable<String, Integer> hashTable = new HashTable<>();

    try {
      hashTable.add("Tariq", 100);
      hashTable.add("Teheran", 75);
      hashTable.add("Siblings", 120);
      System.out.println(hashTable);
      int hashCode = hashTable.hashCode("Tariq");
      int index = hashCode % hashTable.getSize();
      assertTrue(0 <= index && index <= hashTable.getSize());
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  //=================================challenge 31================================
  @Test
  void notEmptyString (){
    String str = "hi hi all";
    assertEquals("hi",App.repeatedWord(str));
  }
  @Test
  void emptyString (){
    String str = "";
    assertNull(App.repeatedWord(str));
  }

  //=================================challenge 32================================
  @Test
  void onTreeIsEmpty(){
    BinaryTree<Integer> tree1 = new BinaryTree<>();
    BinaryTree<Integer> tree2 = new BinaryTree<>();
    tree1.root = new BinaryNode<>(10);
    tree1.root.left = new BinaryNode<>(20);
    tree1.root.right = new BinaryNode<>(25);
    tree1.root.right.right = new BinaryNode<>(40);
    tree1.root.right.left = new BinaryNode<>(50);
    List<Integer> list = new ArrayList<>();
    assertEquals(list,App.treeIntersection(tree1,tree2));
  }

  @Test
  void twoTreesIsEmpty(){
    BinaryTree<Integer> tree1 = new BinaryTree<>();
    BinaryTree<Integer> tree2 = new BinaryTree<>();
    List<Integer> list = new ArrayList<>();
    assertEquals(list,App.treeIntersection(tree1,tree2));
  }
  @Test
  void twoTreesIsNotEmpty(){
    BinaryTree<Integer> tree1 = new BinaryTree<>();
    BinaryTree<Integer> tree2 = new BinaryTree<>();

    tree1.root = new BinaryNode<>(10);
    tree1.root.left = new BinaryNode<>(20);
    tree1.root.right = new BinaryNode<>(25);
    tree1.root.right.right = new BinaryNode<>(40);
    tree1.root.right.left = new BinaryNode<>(50);


    tree2.root = new BinaryNode<Integer>(15);
    tree2.root.left = new BinaryNode<>(20);
    tree2.root.right = new BinaryNode<>(25);
    tree2.root.right.right = new BinaryNode<>(40);
    tree2.root.right.left = new BinaryNode<>(55);
    List<Integer> list = new ArrayList<>();
    list.add(20);
    list.add(25);
    list.add(40);
    assertEquals(list, App.treeIntersection(tree1,tree2));
  }
}
